defmodule Lichen.Winnowing do
  @moduledoc """
  A module in charge of performing the actual fingerprinting and winnowing algorithm.
  """

  @k 40
  @t 80

  @doc """
  Fingerprints the preprocessed code. Fingerprints are generated by hashing n-grams
  of the source using SHA-1, and taking the first 16 bits. Then, the winnowing algorithm
  is used to select which fingerprints to keep.
  """
  @spec winnow(String.t()) :: [integer()]
  def winnow(str) do
    str
    |> ngrams(@k)
    |> Enum.map(&hash/1)
    |> select_hashes(@t - @k + 1)
    |> Enum.to_list()
  end

  defp ngrams(list, size) when is_binary(list) do
    list
    |> String.graphemes()
    |> ngrams(size)
    |> Stream.map(&Enum.join/1)
  end

  defp ngrams(list, size) do
    Stream.unfold(list, fn acc ->
      curr = Enum.take(acc, size)
      unless Enum.count(curr) < size, do: {curr, tl(acc)}
    end)
  end

  defp hash(str) do
    <<x::16, _::binary>> = :crypto.hash(:sha, str)
    x
  end

  defp select_hashes(fingerprints, size) do
    fingerprints
    |> ngrams(size)
    |> Stream.with_index()
    |> Stream.map(fn {window, idx} ->
      window
      |> Enum.with_index(idx)
      |> Enum.reverse()
      |> Enum.min()
    end)
    |> Stream.uniq_by(&elem(&1, 1))
    |> Enum.map(&elem(&1, 0))
  end
end
